//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Jordan on 12/20/16.
//  Copyright Â© 2016 Jordan. All rights reserved.
//


// https://www.captechconsulting.com/blogs/ios-10-imessages-sdk-creating-an-imessages-extension

import UIKit
import Messages

struct Post {
    var title: String?
    var score: NSNumber?
    var url: String?
    var domain: String?
}



class MessagesViewController: MSMessagesAppViewController {
    
    let REDDIT_API_URL = "https://www.reddit.com/r/programming.json";
    
    var posts: [Post]?
    var savedConversation: MSConversation?
    
    @IBOutlet weak var tableView: UITableView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        tableView.estimatedRowHeight = 100.0
        tableView.rowHeight = UITableViewAutomaticDimension
        self.getTopStories { (results) in
            self.posts = results;
            DispatchQueue.main.async {
                self.tableView.reloadData();
            }
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    func getTopStories(_ completionBlock: @escaping ((_ results: [Post]) -> Void )) {
        let defaultSession = URLSession(configuration: URLSessionConfiguration.default);
        
        defaultSession.dataTask(with: URL(string: self.REDDIT_API_URL)!) { (data, response, error) in
            guard let sData = data else { return }
            do {
                let json:[String:Any] = try JSONSerialization.jsonObject(with: sData, options: .mutableContainers) as! [String:Any]
                guard let wrapper = json["data"] as! NSDictionary?, let children = wrapper["children"] as? NSArray else { return }
                var posts = [Post]()
                for child in children {
                    guard let childDict = child as? NSDictionary, let post = childDict["data"] as? NSDictionary else { continue }
                    var redditObject = Post()
                    if let score = post["score"] as? NSNumber {
                        redditObject.score = score
                    }
                    if let title = post["title"] as? NSString {
                        redditObject.title = String(title)
                    }
                    if let url = post["url"] as? NSString {
                        redditObject.url = String(url)
                    }
                    if let domain = post["domain"] as? NSString {
                        redditObject.domain = String(domain)
                    }
                    posts.append(redditObject)
                }
                completionBlock(posts)
            } catch {
                print(error)
            }
            }.resume()
    }
    
}

extension MessagesViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return posts?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let tvc:PostTableViewCell = tableView.dequeueReusableCell(withIdentifier: "post") as! PostTableViewCell;
        if let post = posts?[indexPath.row] {
            tvc.title.text = post.title ?? "No Title"
            if let score = post.score {
                tvc.scoreLabel.text = "Score: \(score)";
            }
            tvc.urlLabel.text = post.domain ?? "No URL"
        }
        return tvc;
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let post = posts?[indexPath.row] else { return }
        let message = MSMessage();
        let layout = MSMessageTemplateLayout();
        layout.caption = post.title;
        if let score = post.score {
            layout.subcaption = "\(score)";
        }
        layout.trailingSubcaption = post.domain
        if let postUrl = post.url, let url = URL(string: postUrl) {
            message.url = url;
        }
        message.layout = layout;
        savedConversation?.insert(message, completionHandler: { (error) in
            print("This hit \(error)")
        })
    }
}
